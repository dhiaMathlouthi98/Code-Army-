<?php

namespace App\Controller;

use App\Entity\Cours;
use App\Form\CoursType;
use App\Service\FileUploader;

use Doctrine\Migrations\Tools\Console\ConsoleInputMigratorConfigurationFactory;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Request;
class CoursController extends AbstractController
{
    /**
     * @Route("/product/new", name="app_product_new")
     */
    public function new(Request $request)
    {
        $cours = new Cours();
        $form = $this->createForm(CoursType::class, $cours);
        $form->handleRequest($request);
        $fileUploader = new FileUploader();

        if ($form->isSubmitted() && $form->isValid()) {
            $file = $cours->getBrochure();
            $fileName = $fileUploader->upload($file);

            $cours->setBrochure($fileName);
            $file = $cours->getBrochure();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('brochures_directory'),
                $fileName
            );

            // updates the 'brochure' property to store the PDF file name
            // instead of its contents
            $cours->setBrochure($fileName);

            // ... persist the $product variable or any other work

           // return $this->redirect($this->generateUrl('app_product_list'));
        }

        return $this->render('notes/cours.html.twig', array(
            'form' => $form->createView(),
        ));
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}
